---
title: "Assignment 03"
author: 
  - name: "Yibei Yu"
    affiliations:
      - id: bu
        name: Boston University
        city: Boston
        state: MA
date: "2025-09-22"
number-sections: true
format: 
  html:
    theme: cerulean
    toc: true
    toc-depth: 2
execute: 
  echo: true
  eval: true
  freeze: auto
---
```{python}
from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql.functions import col, count, expr
from pyspark.sql.functions import col, when, regexp_replace
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio

spark = SparkSession.builder.appName("Assignment03").getOrCreate()

df = (spark.read.option("header", "true")
              .option("inferSchema", "true")
              .option("multiLine", "true")
              .option("escape", "\"")
              .csv("data/lightcast_job_postings.csv"))

df.createOrReplaceTempView("job_postings")
df.printSchema()
df.show(5)
```
```{python}
df = (df.withColumn("SALARY_FROM", col("SALARY_FROM").cast("double"))
        .withColumn("SALARY_TO",   col("SALARY_TO").cast("double"))
        .withColumn("SALARY",      col("SALARY").cast("double"))
        .withColumn("MAX_YEARS_EXPERIENCE", col("MAX_YEARS_EXPERIENCE").cast("double")))

df = df.withColumn(
    "Average_Salary",
    when(col("SALARY").isNotNull(), col("SALARY"))
    .otherwise((col("SALARY_FROM")+col("SALARY_TO"))/2.0)
)

df = df.withColumn("EDUCATION_LEVELS_NAME",
                   regexp_replace(col("EDUCATION_LEVELS_NAME"), r"\n|\r", ""))

df_clean = df.select("Average_Salary","SALARY_FROM","SALARY_TO","SALARY",
                     "NAICS_2022_2_NAME","NAICS_2022_3_NAME","NAICS_2022_4_NAME",
                     "EMPLOYMENT_TYPE_NAME","ONET_NAME","LOT_V6_SPECIALIZED_OCCUPATION_NAME",
                     "MAX_YEARS_EXPERIENCE","REMOTE_TYPE_NAME","EDUCATION_LEVELS_NAME").cache()

print("Rows retained:", df_clean.count())
```

# Salary Distribution by Industry and Employment Type
```{python}
df_filtered = df.filter((col("SALARY_FROM").isNotNull()) & (col("SALARY_FROM") > 0))
salary_industry = df_filtered.select("NAICS2_NAME", "SALARY_FROM", "EMPLOYMENT_TYPE_NAME").toPandas()

import plotly.express as px

fig1 = px.box(
    salary_industry,
    x="NAICS2_NAME",
    y="SALARY_FROM",
    color="EMPLOYMENT_TYPE_NAME",
    title="Salary Distribution by Industry & Employment Type",
    labels={"NAICS2_NAME":"Industry", "SALARY_FROM":"Salary ($)", "EMPLOYMENT_TYPE_NAME":"Employment Type"},
)

fig1.update_layout(template="plotly_white", xaxis_tickangle=-45)
fig1.show()
fig1.write_image("salary_plot.png")
```
![Salary Box Plot](salary_plot.png){width=80%}

**Analysis**
The boxplots show significant differences in salary distribution across industries. Industries such as information technology, finance, and insurance exhibit a wider salary range and are characterized by more extreme outliers. The median salary for full-time positions is consistently higher than that for part-time positions. Some industries have a large number of low-paying outliers, indicating significant salary disparity within these industries.

# Salary Analysis by ONET Occupation Type (Bubble Chart)
```{python}
import plotly.express as px
import pyspark.sql.functions as F
from pyspark.sql.functions import col, count

# Step 1: Filter valid salary and ONET_NAME
df_filtered = df.filter(
    (col("SALARY").isNotNull()) & 
    (col("SALARY") > 0) & 
    (col("ONET_NAME").isNotNull())
)

# Optional: filter by NAICS if the assignment asks
# df_filtered = df_filtered.filter(
#     (col("NAICS_2022_4") == '5182') | 
#     (col("NAICS_2022_5") == '51821') | 
#     (col("NAICS_2022_6") == '518210')
# )

# Step 2: Group by ONET_NAME and compute median salary and job count
onet_salary = df_filtered.groupBy("ONET_NAME").agg(
    F.expr("percentile_approx(SALARY, 0.5)").alias("Median_Salary"),
    count("*").alias("Job_Postings")
).toPandas()

# Step 3: Optional â€“ only keep top 20 occupations
top_onet_salary = onet_salary.sort_values("Job_Postings", ascending=False).head(20)

# Step 4: Create bubble chart
fig2 = px.scatter(
    top_onet_salary,
    x="ONET_NAME",
    y="Median_Salary",
    size="Job_Postings",
    color="Median_Salary",
    title="Top 20 ONET Occupations by Median Salary and Job Postings",
    labels={
        "ONET_NAME": "Occupation",
        "Median_Salary": "Median Salary ($)",
        "Job_Postings": "Number of Postings"
    }
)

fig2.update_layout(
    template="plotly_white",
    xaxis_tickangle=-45,
    height=600
)

# Step 5: Save image (make sure /figs exists or adjust the path)
fig2.write_image("figs/occupation_type.png")

```

# Salary by Education Level
```{python}
from pyspark.sql.functions import when

df_edu = df_filtered.withColumn(
    "EDU_GROUP",
    when(col("EDUCATION_LEVELS_NAME").rlike("Associate|GED|No Education"), "Associate or Lower")
    .when(col("EDUCATION_LEVELS_NAME").rlike("Bachelor"), "Bachelor")
    .when(col("EDUCATION_LEVELS_NAME").rlike("Master"), "Master")
    .when(col("EDUCATION_LEVELS_NAME").rlike("PhD|Doctorate"), "PhD")
)

edu_pd = df_edu.select("MAX_YEARS_EXPERIENCE", "Average_Salary", "EDU_GROUP", "LOT_V6_SPECIALIZED_OCCUPATION_NAME").toPandas()

fig3 = px.scatter(
    edu_pd,
    x="MAX_YEARS_EXPERIENCE",
    y="Average_Salary",
    color="EDU_GROUP",
    hover_name="LOT_V6_SPECIALIZED_OCCUPATION_NAME",
    title="Experience vs Salary by Education Level",
    labels={"MAX_YEARS_EXPERIENCE":"Years of Experience", "Average_Salary":"Salary ($)"}
)

fig3.update_traces(marker=dict(size=8, opacity=0.7))
fig3.show()
fig3.write_image("EDUCATION_LEVEL.png")
```

# Salary by Remote Work Type
```{python}
df_remote = df_filtered.withColumn(
    "REMOTE_GROUP",
    when(col("REMOTE_TYPE_NAME") == "Remote", "Remote")
    .when(col("REMOTE_TYPE_NAME") == "Hybrid", "Hybrid")
    .otherwise("Onsite")
)

remote_pd = df_remote.select("MAX_YEARS_EXPERIENCE", "Average_Salary", "LOT_V6_SPECIALIZED_OCCUPATION_NAME", "REMOTE_GROUP").toPandas()

# Scatter
fig4 = px.scatter(
    remote_pd,
    x="MAX_YEARS_EXPERIENCE",
    y="Average_Salary",
    color="REMOTE_GROUP",
    hover_name="LOT_V6_SPECIALIZED_OCCUPATION_NAME",
    title="Experience vs Salary by Remote Work Type"
)
fig4.show()
fig4.write_image("Remote_scatter.png")

# Histograms
fig5 = px.histogram(
    remote_pd,
    x="Average_Salary",
    color="REMOTE_GROUP",
    barmode="overlay",
    title="Salary Distribution by Remote Type"
)
fig5.show()
fig4.write_image("Remote_his.png")
```




